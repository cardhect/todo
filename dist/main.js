/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";class t{constructor(t){this.title=t,this.todos=[]}add(t){this.todos.push(t)}remove(t){for(let e=0;e<this.todos.length;e++)this.todos[e].title===t&&(this.todos.splice(e,1),e--)}}class e{constructor(t,e,n,o){this.title=t,this.description=e,this.dueDate=n,this.priority=o}}let n=[];function o(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function r(t){return o(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function i(t){o(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function a(t){if(o(1,arguments),!r(t)&&"number"!=typeof t)return!1;var e=i(t);return!isNaN(Number(e))}function d(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function l(t,e){o(2,arguments);var n=i(t).getTime(),r=d(e);return new Date(n+r)}function s(t,e){o(2,arguments);var n=d(e);return l(t,-n)}var u=864e5;function c(t){o(1,arguments);var e=1,n=i(t),r=n.getUTCDay(),a=(r<e?7:0)+r-e;return n.setUTCDate(n.getUTCDate()-a),n.setUTCHours(0,0,0,0),n}function m(t){o(1,arguments);var e=i(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=c(r),d=new Date(0);d.setUTCFullYear(n,0,4),d.setUTCHours(0,0,0,0);var l=c(d);return e.getTime()>=a.getTime()?n+1:e.getTime()>=l.getTime()?n:n-1}function h(t){o(1,arguments);var e=m(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=c(n);return r}var f=6048e5,p={};function g(){return p}function b(t,e){var n,r,a,l,s,u,c,m;o(1,arguments);var h=g(),f=d(null!==(n=null!==(r=null!==(a=null!==(l=null==e?void 0:e.weekStartsOn)&&void 0!==l?l:null==e||null===(s=e.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==a?a:h.weekStartsOn)&&void 0!==r?r:null===(c=h.locale)||void 0===c||null===(m=c.options)||void 0===m?void 0:m.weekStartsOn)&&void 0!==n?n:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var p=i(t),b=p.getUTCDay(),v=(b<f?7:0)+b-f;return p.setUTCDate(p.getUTCDate()-v),p.setUTCHours(0,0,0,0),p}function v(t,e){var n,r,a,l,s,u,c,m;o(1,arguments);var h=i(t),f=h.getUTCFullYear(),p=g(),v=d(null!==(n=null!==(r=null!==(a=null!==(l=null==e?void 0:e.firstWeekContainsDate)&&void 0!==l?l:null==e||null===(s=e.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:p.firstWeekContainsDate)&&void 0!==r?r:null===(c=p.locale)||void 0===c||null===(m=c.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==n?n:1);if(!(v>=1&&v<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var y=new Date(0);y.setUTCFullYear(f+1,0,v),y.setUTCHours(0,0,0,0);var w=b(y,e),C=new Date(0);C.setUTCFullYear(f,0,v),C.setUTCHours(0,0,0,0);var T=b(C,e);return h.getTime()>=w.getTime()?f+1:h.getTime()>=T.getTime()?f:f-1}function y(t,e){var n,r,i,a,l,s,u,c;o(1,arguments);var m=g(),h=d(null!==(n=null!==(r=null!==(i=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(l=e.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==i?i:m.firstWeekContainsDate)&&void 0!==r?r:null===(u=m.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),f=v(t,e),p=new Date(0);p.setUTCFullYear(f,0,h),p.setUTCHours(0,0,0,0);var y=b(p,e);return y}var w=6048e5;function C(t,e){for(var n=t<0?"-":"",o=Math.abs(t).toString();o.length<e;)o="0"+o;return n+o}const T=function(t,e){var n=t.getUTCFullYear(),o=n>0?n:1-n;return C("yy"===e?o%100:o,e.length)},E=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):C(n+1,2)},A=function(t,e){return C(t.getUTCDate(),e.length)},D=function(t,e){return C(t.getUTCHours()%12||12,e.length)},x=function(t,e){return C(t.getUTCHours(),e.length)},S=function(t,e){return C(t.getUTCMinutes(),e.length)},k=function(t,e){return C(t.getUTCSeconds(),e.length)},M=function(t,e){var n=e.length,o=t.getUTCMilliseconds();return C(Math.floor(o*Math.pow(10,n-3)),e.length)};function L(t,e){var n=t>0?"-":"+",o=Math.abs(t),r=Math.floor(o/60),i=o%60;if(0===i)return n+String(r);var a=e||"";return n+String(r)+a+C(i,2)}function N(t,e){return t%60==0?(t>0?"-":"+")+C(Math.abs(t)/60,2):U(t,e)}function U(t,e){var n=e||"",o=t>0?"-":"+",r=Math.abs(t);return o+C(Math.floor(r/60),2)+n+C(r%60,2)}const q={G:function(t,e,n){var o=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var o=t.getUTCFullYear(),r=o>0?o:1-o;return n.ordinalNumber(r,{unit:"year"})}return T(t,e)},Y:function(t,e,n,o){var r=v(t,o),i=r>0?r:1-r;return"YY"===e?C(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):C(i,e.length)},R:function(t,e){return C(m(t),e.length)},u:function(t,e){return C(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var o=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return C(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(t,e,n){var o=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return C(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(t,e,n){var o=t.getUTCMonth();switch(e){case"M":case"MM":return E(t,e);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(t,e,n){var o=t.getUTCMonth();switch(e){case"L":return String(o+1);case"LL":return C(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var a=function(t,e){o(1,arguments);var n=i(t),r=b(n,e).getTime()-y(n,e).getTime();return Math.round(r/w)+1}(t,r);return"wo"===e?n.ordinalNumber(a,{unit:"week"}):C(a,e.length)},I:function(t,e,n){var r=function(t){o(1,arguments);var e=i(t),n=c(e).getTime()-h(e).getTime();return Math.round(n/f)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):C(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):A(t,e)},D:function(t,e,n){var r=function(t){o(1,arguments);var e=i(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),a=n-r;return Math.floor(a/u)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):C(r,e.length)},E:function(t,e,n){var o=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(t,e,n,o){var r=t.getUTCDay(),i=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return C(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,o){var r=t.getUTCDay(),i=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return C(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){var o=t.getUTCDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return C(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(t,e,n){var o=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(t,e,n){var o,r=t.getUTCHours();switch(o=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},B:function(t,e,n){var o,r=t.getUTCHours();switch(o=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var o=t.getUTCHours()%12;return 0===o&&(o=12),n.ordinalNumber(o,{unit:"hour"})}return D(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):x(t,e)},K:function(t,e,n){var o=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(o,{unit:"hour"}):C(o,e.length)},k:function(t,e,n){var o=t.getUTCHours();return 0===o&&(o=24),"ko"===e?n.ordinalNumber(o,{unit:"hour"}):C(o,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):S(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):k(t,e)},S:function(t,e){return M(t,e)},X:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return N(r);case"XXXX":case"XX":return U(r);default:return U(r,":")}},x:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"x":return N(r);case"xxxx":case"xx":return U(r);default:return U(r,":")}},O:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+L(r,":");default:return"GMT"+U(r,":")}},z:function(t,e,n,o){var r=(o._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+L(r,":");default:return"GMT"+U(r,":")}},t:function(t,e,n,o){var r=o._originalDate||t;return C(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,o){return C((o._originalDate||t).getTime(),e.length)}};var P=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},B=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},W={p:B,P:function(t,e){var n,o=t.match(/(P+)(p+)?/)||[],r=o[1],i=o[2];if(!i)return P(t,e);switch(r){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",P(r,e)).replace("{{time}}",B(i,e))}};const F=W;function O(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var I=["D","DD"],Y=["YY","YYYY"];function _(t){return-1!==I.indexOf(t)}function j(t){return-1!==Y.indexOf(t)}function H(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var z={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function R(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,o=t.formats[n]||t.formats[t.defaultWidth];return o}}var Q,G={date:R({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:R({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:R({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},X={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function V(t){return function(e,n){var o;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var r=t.defaultFormattingWidth||t.defaultWidth,i=null!=n&&n.width?String(n.width):r;o=t.formattingValues[i]||t.formattingValues[r]}else{var a=t.defaultWidth,d=null!=n&&n.width?String(n.width):t.defaultWidth;o=t.values[d]||t.values[a]}return o[t.argumentCallback?t.argumentCallback(e):e]}}function J(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=n.width,r=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],i=e.match(r);if(!i)return null;var a,d=i[0],l=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],s=Array.isArray(l)?Z(l,(function(t){return t.test(d)})):$(l,(function(t){return t.test(d)}));a=t.valueCallback?t.valueCallback(s):s,a=n.valueCallback?n.valueCallback(a):a;var u=e.slice(d.length);return{value:a,rest:u}}}function $(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function Z(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const K={code:"en-US",formatDistance:function(t,e,n){var o,r=z[t];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:G,formatRelative:function(t,e,n,o){return X[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:V({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:V({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:V({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:V({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:V({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(Q={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(Q.matchPattern);if(!n)return null;var o=n[0],r=t.match(Q.parsePattern);if(!r)return null;var i=Q.valueCallback?Q.valueCallback(r[0]):r[0];i=e.valueCallback?e.valueCallback(i):i;var a=t.slice(o.length);return{value:i,rest:a}}),era:J({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:J({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:J({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:J({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:J({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var tt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,et=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,nt=/^'([^]*?)'?$/,ot=/''/g,rt=/[a-zA-Z]/;function it(t,e,n){var r,l,u,c,m,h,f,p,b,v,y,w,C,T,E,A,D,x;o(2,arguments);var S=String(e),k=g(),M=null!==(r=null!==(l=null==n?void 0:n.locale)&&void 0!==l?l:k.locale)&&void 0!==r?r:K,L=d(null!==(u=null!==(c=null!==(m=null!==(h=null==n?void 0:n.firstWeekContainsDate)&&void 0!==h?h:null==n||null===(f=n.locale)||void 0===f||null===(p=f.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==m?m:k.firstWeekContainsDate)&&void 0!==c?c:null===(b=k.locale)||void 0===b||null===(v=b.options)||void 0===v?void 0:v.firstWeekContainsDate)&&void 0!==u?u:1);if(!(L>=1&&L<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var N=d(null!==(y=null!==(w=null!==(C=null!==(T=null==n?void 0:n.weekStartsOn)&&void 0!==T?T:null==n||null===(E=n.locale)||void 0===E||null===(A=E.options)||void 0===A?void 0:A.weekStartsOn)&&void 0!==C?C:k.weekStartsOn)&&void 0!==w?w:null===(D=k.locale)||void 0===D||null===(x=D.options)||void 0===x?void 0:x.weekStartsOn)&&void 0!==y?y:0);if(!(N>=0&&N<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!M.localize)throw new RangeError("locale must contain localize property");if(!M.formatLong)throw new RangeError("locale must contain formatLong property");var U=i(t);if(!a(U))throw new RangeError("Invalid time value");var P=O(U),B=s(U,P),W={firstWeekContainsDate:L,weekStartsOn:N,locale:M,_originalDate:U},I=S.match(et).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,F[e])(t,M.formatLong):t})).join("").match(tt).map((function(o){if("''"===o)return"'";var r=o[0];if("'"===r)return at(o);var i=q[r];if(i)return null!=n&&n.useAdditionalWeekYearTokens||!j(o)||H(o,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!_(o)||H(o,e,String(t)),i(B,o,M.localize,W);if(r.match(rt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return o})).join("");return I}function at(t){var e=t.match(nt);return e?e[1].replace(ot,"'"):t}function dt(t){let e;try{e=window[t];const n="__storage_test__";return e.setItem(n,n),e.removeItem(n),!0}catch(t){return t instanceof DOMException&&(22===t.code||1014===t.code||"QuotaExceededError"===t.name||"NS_ERROR_DOM_QUOTA_REACHED"===t.name)&&e&&0!==e.length}}function lt(){dt("localStorage")&&(localStorage.clear(),window.localStorage.setItem("savedListArray",JSON.stringify(n)))}class st{constructor(){this.todoData=[],this.list,this.todoObj={title:"",desc:"",dueDate:"",prio:""}}grabFormData(){const t=document.getElementById("title").value,n=document.getElementById("description").value,o=document.getElementById("due-date").value;let r,i="";i=o.length>0?it(new Date(o.replace(/-/g,"/")),"M/d/yy"):"";var a=document.getElementsByName("priority");for(let t=0;t<a.length;t++)a[t].checked&&(r=a[t].value);const d=document.getElementById("list").value,l=new e(t,n,i,r);this.todoData.push(l),this.list=d}grabEditFromData(){const t=document.getElementById("edit-title").value,e=document.getElementById("edit-description").value,n=document.getElementById("edit-due-date").value;let o;var r=document.getElementsByName("edit-priority");for(let t=0;t<r.length;t++)r[t].checked&&(o=r[t].value);return{title:t,description:e,dueDate:n,priority:o}}updateTodo(t){let e=this.grabEditFromData().title,o=this.grabEditFromData().description,r=this.grabEditFromData().dueDate,i=it(new Date(r),"M/d/yy"),a=this.grabEditFromData().priority;const d=document.querySelectorAll(".todo-obj"),l=document.querySelector(".header__list-title").textContent;for(let r=0;r<n.length;r++)if(l==n[r].title)for(let l=0;l<d.length;l++)if(t==d[l].children[0].children[0].innerText){const t=n[r].todos[l];t.title=e,t.description=o,t.dueDate=i,t.priority=a,d[l].children[0].firstChild.innerText=e,d[l].children[1].children[1].innerText=o,d[l].children[1].children[0].innerText=i,d[l].children[0].lastChild.innerText=a}}pushToList(t){let e=this.todoData.length;t.add(this.todoData[e-1])}_returnList(){return this.list}insertTodoIntoList(){let t=this;t.grabFormData();let e=document.getElementById("list").selectedOptions[0].label;for(let o=0;o<n.length;o++)n[o].title==e&&(t.pushToList(n[o]),lt())}createNewList(){let e=new Lt;document.getElementById("list-form-btn").addEventListener("click",(()=>{let o=document.getElementById("new-list").value;const r=o.charAt(0).toUpperCase()+o.slice(1),i=new t(r);n.push(i),e.formReset();const a=document.getElementById("list"),d=document.createElement("option");d.setAttribute("value",o),d.setAttribute("class","list-value"),d.textContent=r,a.append(d)}))}removeTodo(){const t=new Lt;let e=document.querySelectorAll(".todo-delete");const o=document.querySelector(".todo-view");for(let r=0;r<e.length;r++)e[r].addEventListener("click",(e=>{const r=e.path[2];o.removeChild(r);const i=e.path[2].firstChild.childNodes[0].innerText,a=document.querySelector(".header__list-title").textContent;for(let e=0;e<n.length;e++){const o=n[e];a==n[e].title&&(o.remove(i),t.displayTodoAmount())}}))}todoEditButtonListener(){const t=this,e=new Lt,o=document.querySelectorAll(".todo-edit");for(let r=0;r<o.length;r++)o[r].addEventListener("click",(o=>{document.getElementById("edit-modal").style.display="block";const r=o.target.parentElement.parentElement.childNodes[0].childNodes[0].innerText,i=o.target.parentNode.parentNode.childNodes[1].childNodes[1].innerText,a=o.target.parentNode.parentNode.childNodes[1].childNodes[0].innerText;let d="";a.length>0&&(d=it(new Date(a),"yyyy-MM-dd"));const l=o.target.parentNode.parentNode.childNodes[0].childNodes[1].innerText;e.selectedTodoEdit(r,i,d,l),document.querySelector("#edit-list").innerHTML="";for(let t=0;t<n.length;t++){const e=document.createElement("option");e.setAttribute("value",n[t].title),e.setAttribute("class","list-value");const o=n[t].title.charAt(0).toUpperCase()+n[t].title.slice(1);e.textContent=o,document.querySelector("#edit-list").append(e)}document.getElementById("edit-form-btn").addEventListener("click",(()=>{t.updateTodo(r)}))}))}}Math.pow(10,8);var ut=36e5;function ct(t,e){var n;o(1,arguments);var r=d(null!==(n=null==e?void 0:e.additionalDigits)&&void 0!==n?n:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var i,a=gt(t);if(a.date){var l=bt(a.date,r);i=vt(l.restDateString,l.year)}if(!i||isNaN(i.getTime()))return new Date(NaN);var s,u=i.getTime(),c=0;if(a.time&&(c=wt(a.time),isNaN(c)))return new Date(NaN);if(!a.timezone){var m=new Date(u+c),h=new Date(0);return h.setFullYear(m.getUTCFullYear(),m.getUTCMonth(),m.getUTCDate()),h.setHours(m.getUTCHours(),m.getUTCMinutes(),m.getUTCSeconds(),m.getUTCMilliseconds()),h}return s=Tt(a.timezone),isNaN(s)?new Date(NaN):new Date(u+c+s)}var mt={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},ht=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,ft=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,pt=/^([+-])(\d{2})(?::?(\d{2}))?$/;function gt(t){var e,n={},o=t.split(mt.dateTimeDelimiter);if(o.length>2)return n;if(/:/.test(o[0])?e=o[0]:(n.date=o[0],e=o[1],mt.timeZoneDelimiter.test(n.date)&&(n.date=t.split(mt.timeZoneDelimiter)[0],e=t.substr(n.date.length,t.length))),e){var r=mt.timezone.exec(e);r?(n.time=e.replace(r[1],""),n.timezone=r[1]):n.time=e}return n}function bt(t,e){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),o=t.match(n);if(!o)return{year:NaN,restDateString:""};var r=o[1]?parseInt(o[1]):null,i=o[2]?parseInt(o[2]):null;return{year:null===i?r:100*i,restDateString:t.slice((o[1]||o[2]).length)}}function vt(t,e){if(null===e)return new Date(NaN);var n=t.match(ht);if(!n)return new Date(NaN);var o=!!n[4],r=yt(n[1]),i=yt(n[2])-1,a=yt(n[3]),d=yt(n[4]),l=yt(n[5])-1;if(o)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,d,l)?function(t,e,n){var o=new Date(0);o.setUTCFullYear(t,0,4);var r=7*(e-1)+n+1-(o.getUTCDay()||7);return o.setUTCDate(o.getUTCDate()+r),o}(e,d,l):new Date(NaN);var s=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(Et[e]||(At(t)?29:28))}(e,i,a)&&function(t,e){return e>=1&&e<=(At(t)?366:365)}(e,r)?(s.setUTCFullYear(e,i,Math.max(r,a)),s):new Date(NaN)}function yt(t){return t?parseInt(t):1}function wt(t){var e=t.match(ft);if(!e)return NaN;var n=Ct(e[1]),o=Ct(e[2]),r=Ct(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,o,r)?n*ut+6e4*o+1e3*r:NaN}function Ct(t){return t&&parseFloat(t.replace(",","."))||0}function Tt(t){if("Z"===t)return 0;var e=t.match(pt);if(!e)return 0;var n="+"===e[1]?-1:1,o=parseInt(e[2]),r=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,r)?n*(o*ut+6e4*r):NaN}var Et=[31,null,31,30,31,30,31,31,30,31,30,31];function At(t){return t%400==0||t%4==0&&t%100!=0}function Dt(t){return o(1,arguments),i(t).getTime()<Date.now()}function xt(t){o(1,arguments);var e=i(t);return e.setHours(0,0,0,0),e}function St(t,e){o(2,arguments);var n=xt(t),r=xt(e);return n.getTime()===r.getTime()}function kt(t){return o(1,arguments),St(t,Date.now())}function Mt(t,e){o(2,arguments);var n=i(t),r=i(e),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}class Lt{constructor(){var t,e,o;t=this,o=t=>{console.log("Delete button was clicked");const e=t.target.parentNode.firstChild.innerText;console.log(e);for(let t=0;t<n.length;t++){const o=n[t].title;if(console.log(t),console.log(n),o===e){n.splice(t,1),console.log("you removed: "+e),console.table(n),this.clearListView(),this.displayListButtons(),this.addDeleteListListener(),lt();break}}},(e=function(t){var e=function(t,e){if("object"!=typeof t||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,e);if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t,"string");return"symbol"==typeof e?e:String(e)}(e="removeFromArray"))in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o}todoForm(){let t=new st,e=["title","description","dueDate","priority","list"];const o=document.createElement("form");o.setAttribute("onsubmit","return false"),o.setAttribute("id","todo-form");const r=document.querySelector(".modal-content"),i=document.querySelector(".close");r.insertBefore(o,i);for(let t=0;t<e.length;t++){const r=e[t];if("title"===r){let t=document.createElement("label");t.setAttribute("for","title"),t.textContent="Title:";let e=document.createElement("input");e.setAttribute("type","text"),e.setAttribute("id","title"),e.setAttribute("name","title"),o.appendChild(t),o.appendChild(e)}if("description"===r){let t=document.createElement("label");t.setAttribute("for","description"),t.textContent="Description:";let e=document.createElement("input");e.setAttribute("type","text"),e.setAttribute("id","description"),e.setAttribute("name","description"),o.appendChild(t),o.appendChild(e)}if("dueDate"===r){let t=document.createElement("label");t.setAttribute("for","due-date"),t.textContent="Due Date:";let e=document.createElement("input");e.setAttribute("type","date"),e.setAttribute("id","due-date"),e.setAttribute("name","due-date"),o.appendChild(t),o.appendChild(e)}if("priority"===r){let t=["low","med","high"],e=document.createElement("fieldset"),n=document.createElement("label");n.setAttribute("for","priority"),n.textContent="Priority: ",o.appendChild(n);for(let n=0;n<t.length;n++){const r=t[n];let i=document.createElement("label");i.setAttribute("for",r),i.textContent=r;let a=document.createElement("input");a.setAttribute("type","radio"),a.setAttribute("id",r),a.setAttribute("name","priority"),a.setAttribute("value",r),o.appendChild(e),e.appendChild(a),e.appendChild(i)}}if("list"===r){let t=document.createElement("label");t.setAttribute("for","List"),t.textContent="List:";let e=document.createElement("select");e.setAttribute("id","list"),e.setAttribute("name","list"),o.appendChild(t),o.appendChild(e),document.querySelector("#list").innerHTML="";for(let t=0;t<n.length;t++){const o=document.createElement("option");o.setAttribute("value",n[t].title),o.setAttribute("class","list-value"),o.textContent=n[t].title.charAt(0).toUpperCase()+n[t].title.slice(1),e.append(o)}}}const a=document.createElement("input");a.setAttribute("type","submit"),a.setAttribute("value","Submit"),a.setAttribute("id","todo-form-btn"),o.appendChild(a);let d=document.getElementById("todo-form-btn"),l=this;d.addEventListener("click",(()=>{t.insertTodoIntoList(),l.displayTodoAmount(),t.todoEditButtonListener();const e=document.querySelector(".header__list-title").textContent;document.getElementById("list").value===e?(l.clearTodoView(),l.displayTodo(),l.editFormModal(),t.todoEditButtonListener(),t.removeTodo(),l.formReset()):l.formReset()}))}editForm(){let t=["title","description","dueDate","priority","list"];const e=document.createElement("form");e.setAttribute("onsubmit","return false"),e.setAttribute("id","edit-form");const o=document.querySelector(".edit-modal-content"),r=document.querySelector(".edit-close");o.insertBefore(e,r);for(let o=0;o<t.length;o++){const r=t[o];if("title"===r){let t=document.createElement("label");t.setAttribute("for","edit-title"),t.textContent="Title:";let n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("id","edit-title"),n.setAttribute("name","edit-title"),e.appendChild(t),e.appendChild(n)}if("description"===r){let t=document.createElement("label");t.setAttribute("for","edit-description"),t.textContent="Description:";let n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("id","edit-description"),n.setAttribute("name","edit-description"),e.appendChild(t),e.appendChild(n)}if("dueDate"===r){let t=document.createElement("label");t.setAttribute("for","edit-due-date"),t.textContent="Due Date:";let n=document.createElement("input");n.setAttribute("type","date"),n.setAttribute("id","edit-due-date"),n.setAttribute("name","edit-due-date"),e.appendChild(t),e.appendChild(n)}if("priority"===r){let t=["low","med","high"],n=document.createElement("fieldset"),o=document.createElement("label");o.setAttribute("for","edit-priority"),o.textContent="Priority: ",e.appendChild(o);for(let o=0;o<t.length;o++){const r=t[o];let i=document.createElement("label");i.setAttribute("for",r),i.textContent=r;let a=document.createElement("input");a.setAttribute("type","radio"),a.setAttribute("id",`edit-${r}`),a.setAttribute("value",r),a.setAttribute("name","edit-priority"),e.appendChild(n),n.appendChild(a),n.appendChild(i)}}if("list"===r){let t=document.createElement("label");t.setAttribute("for","List"),t.textContent="List:";let o=document.createElement("select");o.setAttribute("id","edit-list"),o.setAttribute("name","list"),e.appendChild(t),e.appendChild(o),document.querySelector("#edit-list").innerHTML="";for(let t=0;t<n.length;t++){const e=document.createElement("option");e.setAttribute("value",n[t].title),e.setAttribute("class","list-value"),e.textContent=n[t].title.charAt(0).toUpperCase()+n[t].title.slice(1),o.append(e)}}}const i=document.createElement("input");i.setAttribute("type","submit"),i.setAttribute("value","Make Changes"),i.setAttribute("id","edit-form-btn"),e.appendChild(i);const a=document.getElementById("edit-form-btn");let d=this;a.addEventListener("click",(()=>{d.editFormModal()}))}selectedTodoEdit(t,e,n,o){const r=document.querySelector("#edit-title"),i=document.querySelector("#edit-description"),a=document.querySelector("#edit-due-date"),d=document.querySelector("#edit-low"),l=document.querySelector("#edit-med"),s=document.querySelector("#edit-high");r.value=t,i.value=e,a.value=n,"low"===o?d.checked=!0:"med"===o?l.checked=!0:"high"===o&&(s.checked=!0)}listForm(){const t=document.createElement("form");t.setAttribute("onsubmit","return false"),t.setAttribute("id","list-form"),document.querySelector(".add-list").appendChild(t);let e=document.createElement("label");e.setAttribute("for","new-list"),e.setAttribute("name","new-list"),e.textContent="Add List:";let n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("id","new-list"),n.setAttribute("name","new-list"),t.appendChild(e),t.appendChild(n);const o=document.createElement("input");o.setAttribute("type","submit"),o.setAttribute("value","Submit"),o.setAttribute("id","list-form-btn"),t.appendChild(o)}formReset(){document.getElementById("todo-form").reset()}displayListButtons(){const t=document.querySelector(".list__container");if(null==document.querySelector(".list-option")){const e=n[0].title,o=document.createElement("div");o.setAttribute("class","list-buttons");const r=document.createElement("button"),i=document.createElement("button");i.textContent="Delete List",i.setAttribute("class","list-delete-btn"),r.setAttribute("class","list-option"),r.textContent=e,o.append(r),o.append(i),t.append(o),r.addEventListener("click",(t=>{this.clearTodoView(),this.displaySelectedList(t)}))}for(let e=1;e<n.length;e++){const o=n[e].title,r=document.createElement("button");r.setAttribute("class","list-option"),r.textContent=o;const i=document.createElement("div");i.setAttribute("class","list-buttons"),t.append(i),i.append(r);const a=document.createElement("button");a.textContent="Delete List",a.setAttribute("class","list-delete-btn"),i.append(a)}const e=document.querySelectorAll(".list-option");for(let t=0;t<e.length;t++)e[t].addEventListener("click",(t=>{this.clearTodoView(),this.displaySelectedList(t)}))}AddEventListenerToListSubmit(){const t=document.querySelector(".list__container");document.getElementById("list-form-btn").addEventListener("click",(()=>{let e=n.length,o=n[e-1].title;const r=document.createElement("button");r.setAttribute("class","list-option"),r.textContent=o;const i=document.createElement("div");i.setAttribute("class","list-buttons"),t.append(i),i.append(r);const a=document.createElement("button");a.textContent="Delete List",a.setAttribute("class","list-delete-btn"),i.append(a),this.removeDeleteListListener(),this.addDeleteListListener(),lt(),console.log(n);const d=document.querySelectorAll(".list-option");for(let t=0;t<d.length;t++)d[t].addEventListener("click",(t=>{this.clearTodoView(),this.displaySelectedList(t)}))}))}displaySelectedList(t){let e=new st;this.selectedList=t.target.innerText,document.querySelector(".header__list-title").textContent=this.selectedList,this.displayTodoAmount(),this.displayTodo(),e.todoEditButtonListener(),e.removeTodo()}addDeleteListListener(){const t=document.querySelectorAll(".list-delete-btn");for(let e=0;e<t.length;e++)t[e].addEventListener("click",this.removeFromArray)}removeDeleteListListener(){const t=document.querySelectorAll(".list-delete-btn");for(let e=0;e<t.length;e++)t[e].removeEventListener("click",this.removeFromArray)}displayTodo(){const t=document.querySelector(".header__list-title").textContent,e=document.querySelector(".todo-view");for(let o=0;o<n.length;o++){let r=n[o].title,i=n[o],a=n[o].todos.length;if(t===r&&a>0)for(let t=0;t<a;t++){const n=document.createElement("div"),o=document.createElement("div"),r=document.createElement("div"),a=document.createElement("h1"),d=document.createElement("p"),l=document.createElement("p"),s=document.createElement("p"),u=document.createElement("button"),c=document.createElement("button");a.textContent=i.todos[t].title,d.textContent=i.todos[t].description,l.textContent=i.todos[t].dueDate,s.textContent=i.todos[t].priority,u.textContent="Edit",c.textContent="Delete",n.setAttribute("class","todo-obj"),o.setAttribute("class","todo-top-div"),r.setAttribute("class","todo-bot-div"),a.setAttribute("class","todo-items todo-title"),d.setAttribute("class","todo-items todo-desc"),l.setAttribute("class","todo-items todo-duedate"),s.setAttribute("class","todo-items todo-priority"),u.setAttribute("class","todo-items todo-edit"),c.setAttribute("class","todo-items todo-delete"),o.append(a),o.append(s),r.append(l),r.append(d),r.append(u),r.append(c),n.append(o),n.append(r),e.append(n)}}}displayTodoAmount(){for(let t=0;t<n.length;t++){const e=n[t].title,o=n[t].todos.length;e===this.selectedList&&(document.getElementById("header__todo-amount").textContent=o),e===document.querySelector(".header__list-title").textContent&&(document.getElementById("header__todo-amount").textContent=o)}}clearTodoView(){document.querySelector(".todo-view").innerHTML=""}clearListView(){document.querySelector(".list__container").innerHTML=""}todoFormModal(){let t=document.getElementById("myModal"),e=document.querySelector(".todo-form-modal"),n=document.getElementsByClassName("close")[0];e.onclick=function(){t.style.display="block"},n.onclick=function(){t.style.display="none"},window.onclick=function(e){e.target===t&&(t.style.display="none")}}editFormModal(){let t=document.getElementById("edit-modal"),e=document.querySelector(".todo-edit"),n=document.getElementsByClassName("edit-close")[0];e.onclick=function(){t.style.display="block"},n.onclick=function(){t.style.display="none"},window.onclick=function(e){e.target===t&&(t.style.display="none")}}displayAllTasks(){document.getElementById("all-tasks").addEventListener("click",(()=>{document.querySelector(".header__list-title").textContent="All Tasks";const t=document.querySelector("#header__todo-amount");let e=0;for(let o=0;o<n.length;o++)e+=n[o].todos.length,t.textContent=e;const o=document.querySelector(".todo-view");o.innerHTML="";for(let t=0;t<n.length;t++){let e=n[t],r=n[t].todos.length;for(let t=0;t<r;t++){const n=document.createElement("div"),r=document.createElement("div"),i=document.createElement("div"),a=document.createElement("h1"),d=document.createElement("p"),l=document.createElement("p"),s=document.createElement("p"),u=document.createElement("button"),c=document.createElement("button");a.textContent=e.todos[t].title,d.textContent=e.todos[t].description,l.textContent=e.todos[t].dueDate,s.textContent=e.todos[t].priority,u.textContent="Edit",c.textContent="Delete",n.setAttribute("class","todo-obj"),r.setAttribute("class","todo-top-div"),i.setAttribute("class","todo-bot-div"),a.setAttribute("class","todo-items todo-title"),d.setAttribute("class","todo-items todo-desc"),l.setAttribute("class","todo-items todo-duedate"),s.setAttribute("class","todo-items todo-priority"),u.setAttribute("class","todo-items todo-edit"),c.setAttribute("class","todo-items todo-delete"),r.append(a),r.append(s),i.append(l),i.append(d),i.append(u),i.append(c),n.append(r),n.append(i),o.append(n)}}}))}displayTodoTasks(t){this.clearTodoView();const e=document.querySelector(".todo-view");for(let n=0;n<t.length;n++){const o=document.createElement("div"),r=document.createElement("div"),i=document.createElement("div"),a=document.createElement("h1"),d=document.createElement("p"),l=document.createElement("p"),s=document.createElement("p"),u=document.createElement("button"),c=document.createElement("button");a.textContent=t[n].title,d.textContent=t[n].description,l.textContent=t[n].dueDate,s.textContent=t[n].priority,u.textContent="Edit",c.textContent="Delete",o.setAttribute("class","todo-obj"),r.setAttribute("class","todo-top-div"),i.setAttribute("class","todo-bot-div"),a.setAttribute("class","todo-items todo-title"),d.setAttribute("class","todo-items todo-desc"),l.setAttribute("class","todo-items todo-duedate"),s.setAttribute("class","todo-items todo-priority"),u.setAttribute("class","todo-items todo-edit"),c.setAttribute("class","todo-items todo-delete"),r.append(a),r.append(s),i.append(l),i.append(d),i.append(u),i.append(c),o.append(r),o.append(i),e.append(o)}}displayUpcomingTasks(){document.getElementById("upcoming-tasks").addEventListener("click",(()=>{let t=[];document.querySelector(".header__list-title").textContent="Upcoming";for(let e=0;e<n.length;e++){let o=n[e],r=n[e].todos.length;for(let e=0;e<r;e++){let n=o.todos[e];const r=ct(new Date(n.dueDate).toISOString());Dt(r)||t.push(n),kt(r)&&t.push(n)}}!function(t){for(let e=0;e<t.length;e++){let n=e+1;const o=t[e],r=t[e+1],i=ct(new Date(o.dueDate).toISOString());if(null==r);else if(1==Mt(i,ct(new Date(r.dueDate).toISOString()))){t[e]=r,t[n]=o,e=-1;continue}}}(t),this.clearTodoView();const e=document.querySelector(".todo-view");for(let n=0;n<t.length;n++){const o=document.createElement("div"),r=document.createElement("div"),i=document.createElement("div"),a=document.createElement("h1"),d=document.createElement("p"),l=document.createElement("p"),s=document.createElement("p"),u=document.createElement("button"),c=document.createElement("button");a.textContent=t[n].title,d.textContent=t[n].description,l.textContent=t[n].dueDate,s.textContent=t[n].priority,u.textContent="Edit",c.textContent="Delete",o.setAttribute("class","todo-obj"),r.setAttribute("class","todo-top-div"),i.setAttribute("class","todo-bot-div"),a.setAttribute("class","todo-items todo-title"),d.setAttribute("class","todo-items todo-desc"),l.setAttribute("class","todo-items todo-duedate"),s.setAttribute("class","todo-items todo-priority"),u.setAttribute("class","todo-items todo-edit"),c.setAttribute("class","todo-items todo-delete"),r.append(a),r.append(s),i.append(l),i.append(d),i.append(u),i.append(c),o.append(r),o.append(i),e.append(o)}}))}displayTodayTasks(){document.getElementById("today-tasks").addEventListener("click",(()=>{document.querySelector(".header__list-title").textContent="Today";let t=[];for(let e=0;e<n.length;e++){let o=n[e],r=n[e].todos.length;for(let e=0;e<r;e++){let n=o.todos[e],r=n.dueDate;kt(ct(new Date(r).toISOString()))&&t.push(n)}}this.displayTodoTasks(t)}))}displayPrioTasks(){document.getElementById("prio-tasks").addEventListener("click",(()=>{let t=[];document.querySelector(".header__list-title").textContent="Important";for(let e=0;e<n.length;e++){let o=n[e],r=n[e].todos.length;for(let e=0;e<r;e++){let n=o.todos[e];t.push(n)}}t=function(t){let e=[];for(let n=0;n<t.length;n++){let o=t[n];"high"==t[n].priority&&e.push(o)}for(let n=0;n<t.length;n++){let o=t[n];"med"==t[n].priority&&e.push(o)}for(let n=0;n<t.length;n++){let o=t[n];"low"==t[n].priority&&e.push(o)}return e}(t),this.displayTodoTasks(t)}))}}let Nt=new Lt,Ut=new st,qt=new t("Todo");n.push(qt),Nt.listForm(),Ut.createNewList(),Nt.displayListButtons(),Nt.AddEventListenerToListSubmit(),function(){let o=new Lt,r=new st;if(dt("localStorage"))if(null===localStorage.getItem("savedListArray"));else{let i=window.localStorage.getItem("savedListArray"),a=JSON.parse(i);n.splice(0,n.length);let d=a.length-1;for(let o=0;o<=d;o++){const r=a[o].title,i=new t(r);n.push(i);const d=a[o].todos.length-1;for(let t=0;t<=d;t++){const r=a[o].todos[t],i=r.title,d=r.description,l=r.dueDate,s=r.priority,u=new e(i,d,l,s);n[o].todos.push(u)}}o.displayTodo(),r.todoEditButtonListener(),r.removeTodo(),o.editFormModal(),o.displayListButtons()}}(),Nt.addDeleteListListener(),Nt.todoForm(),Nt.formReset(),Nt.todoFormModal(),Nt.editForm(),Nt.displayAllTasks(),Nt.displayUpcomingTasks(),Nt.displayTodayTasks(),Nt.displayPrioTasks()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,